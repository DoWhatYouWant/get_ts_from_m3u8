'''
从文件夹中读取已下载的m3u8文件，获取密码网址和ts网址列表

'''
import time
from queue import Queue
import requests
import os
import re
import random
import requests
from Crypto.Cipher import AES


#获取path文件夹下的所有m3u8文件路径名的列表
def get_all_files(dir):
    files_ = []
    list_ = os.listdir(dir)
    for i in range(0, len(list_)):
        path = os.path.join(dir, list_[i])
        if os.path.isdir(path):
            files_.extend(get_all_files(path))
        if os.path.isfile(path) and ".m3u8" in path  :
            files_.append(path)
    return files_





#解析m3u8文件，为每条ts网址构造可下载并进行解密的单元数据
def get_keyurl_and_tslist(path):
    tslist = []
    key_url=''
    with open(path,"r",encoding = "utf-8") as f:
        i = 1
        for line in f.readlines():
            #print(line)
            if i==1:
                title =  line[:-1]
            if i==7:
                key_url = re.findall('URI=(.*)',line)
            
            if i ==9:
                k_str = line[:line.rindex('/')]
            if  i>=9 and k_str in line and "key.key" not in line:
                tslist.append(line)
            
            i=i+1

        keyurl = key_url[0][1:-1]
        keycontent = get_keycotent(keyurl)

        return keycontent,title,tslist

#从密码网址获取密钥
def get_keycotent(keyurl):
    
    url_key=keyurl
    page4= requests.get(url_key).text
    keycontent=page4.strip()
    return keycontent


#从构造的单元数据下载单条ts文件，有密钥的下载后进行解密，无密钥的直接下载。
def get_ts(tulpl):
    i,keycontent, title, tssite = tulpl
    
    
    user_agent = [

        "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0",
        "Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; InfoPath.3; rv:11.0) like Gecko"
    ]
    headers = {'User-Agent': random.choice(user_agent)}
    cryptor = AES.new(keycontent.encode(encoding = "utf-8"), AES.MODE_CBC, keycontent.encode(encoding ="utf-8"))
    file_path = "H://newshouxiyulingshi//"+title
    if os.path.exists(file_path):
        pass
    else:
        os.makedirs(file_path)
        
    file_name=fnum = file_path+"//"+str(i).zfill(5)+".ts"
    if os.path.exists(file_name):
        #print(file_name +"已存在")
        return 0
    
    res = requests.get(tssite, headers)
    file_name=fnum = file_path+"//"+str(i).zfill(5)+".ts"
    cont=cryptor.decrypt(res.content)
    with open(file_name,"wb") as f:
        f.write(cont)
        f.close()
    print(file_name +"已下载")
    return 0


def get_tsqueue(tupul):
    q=Queue()
    keycontent,title,tslist=tupul
    for i in range(len(ts_list)):
        q.put((i,keycontent,title,ts_list[i]))
    return q


import threading

#get_ts(q.get())

class MyThread(threading.Thread):
    def __init__(self, n):
        super(MyThread, self).__init__()  # 重构run函数必须要写
        self.n = n

    def run(self):
        get_ts(self.n)



#从"H:\\shouxiyulingshi"文件夹下读取.m3u8文件
f_list=get_all_files("H:\\shouxiyulingshi")
print(f_list)
continue_num = 0
for item in f_list:
    print(continue_num)
    #从item文件中获取密钥，和ts片段的网址
    tupul=get_keyurl_and_tslist(item)
    keycontent,title,ts_list=tupul
    q = get_tsqueue(tupul)
    i_num=0
    
    while q.empty()==False:
        try:
            t="thread"+str(i_num)
            t = MyThread(q.get())
            t.start()
            i_num = i_num + 1
        except :
            print("继续")
            pass
    print(title+"一集")
    #x = input("一集下载完")
    continue_num =continue_num+1

